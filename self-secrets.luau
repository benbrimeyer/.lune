local stdio = require("@lune/stdio")
local fs = require("@lune/fs")

local toBase64 = require("./sha/toBase64")

local SECRETS_DIR = "secrets"

local function askAndValidateBranchPrefix()
    local branchPrefix = stdio.prompt("text", "What would you like your branch prefix to be?")
    if #branchPrefix == 0 then
        stdio.write(stdio.style("bold"))
        stdio.write("You must provide a branch prefix!\n")
        stdio.write(stdio.style("reset"))
        return askAndValidateBranchPrefix()
    elseif branchPrefix:find("/") then
        stdio.write(stdio.style("bold"))
        stdio.write("Your branch prefix cannot contain a forward slash!\n")
        stdio.write(stdio.style("reset"))
        return askAndValidateBranchPrefix()
    elseif branchPrefix:find("%s") then
        stdio.write(stdio.style("bold"))
        stdio.write("Your branch prefix cannot contain a space!\n")
        stdio.write(stdio.style("reset"))
        return askAndValidateBranchPrefix()
    end

    return branchPrefix
end

local function questionaire()
    stdio.write(stdio.style("bold"))
    stdio.write("Time for our questionaire!\n\n")

    -- Branch prefix
    stdio.write(stdio.style("reset"))
    stdio.write("Lets create a branch prefix for you!\n")
    stdio.write("We'll use this sting to prefix any feature branches you create. (e.g. ")
    stdio.write(stdio.color("yellow"))
    stdio.write("prefix")
    stdio.write(stdio.style("reset"))
    stdio.write("/feature/branch_name")
    stdio.write(")\n\n")

    print("This can be any string you want as long as it can be used as part of a branch name. I recommend using your name.\n")
    local branchPrefix = askAndValidateBranchPrefix()
    print("Great! Your branch prefix is: " .. branchPrefix .. "\n")

    -- Jira URL
    stdio.write(stdio.style("reset"))
    stdio.write("Next, we need to set up your Jira URL.\n")
    stdio.write("This is the URL of your Jira instance. (e.g. ")
    stdio.write(stdio.color("yellow"))
    stdio.write("yourcompany.atlassian.net")
    stdio.write(stdio.style("reset"))
    stdio.write(")\n\n")

    local jiraUrl = stdio.prompt("text", "Please enter your Jira URL")
    print("Great! Your Jira URL is: " .. jiraUrl .. "\n")

    -- Jira Auth
    print("Next, we need to set up your Jira credentials.")
    stdio.write(stdio.style("reset"))
    stdio.write("You may generate an Atlassian API token here: ")
    stdio.write(stdio.color("blue"))
    stdio.write("https://id.atlassian.com/manage-profile/security/api-tokens\n\n")
    stdio.write(stdio.style("reset"))

    local jiraUsername = stdio.prompt("text", "Please enter your Jira username (email address)")
    local jiraToken = stdio.prompt("text", "Please enter your Jira API token")
    local base64Token = toBase64(`{jiraUsername}:{jiraToken}`)
    print(base64Token)

    print("\nGreat! Your Jira credentials are set up.\n")

    return {
        branchPrefix = branchPrefix,
        jiraUrl = jiraUrl,
        jiraUsername = jiraUsername,
        jiraToken = jiraToken,
        base64Token = base64Token
    }
end

local function writeSecrets(answers)
    if not fs.isDir(SECRETS_DIR) then
        fs.writeDir(SECRETS_DIR)
    end

    local header = "-- This file was generated by the init.luau script\n\n"

    fs.writeFile(`{SECRETS_DIR}/BRANCH_PREFIX.luau`, `{header}return "{answers.branchPrefix}"`)
    fs.writeFile(`{SECRETS_DIR}/JIRA_AUTH.luau`, `{header}return "{answers.base64Token}"`)
    fs.writeFile(`{SECRETS_DIR}/JIRA_URL.luau`, `{header}return "{answers.jiraUrl}"`)

    print("Secrets written!")
end

local function init()
    print("Running init...")
    local answers = questionaire()

    -- Write to secrets
    writeSecrets(answers)
end

init()
